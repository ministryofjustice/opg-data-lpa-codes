name: Build

on:
  pull_request:
    branches:
      - main

defaults:
 run:
  shell: bash

jobs:
  build_lambda:
    name: Build Lambda
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8.1
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.1
      - name: Install Requirements
        run: |
            for i in $(ls -d lambda_functions/*/ | awk -F'/' '{print $2}')
            do
              pip3 install -r ./lambda_functions/"${i}"/requirements/dev-requirements.txt
            done
      - name: Run Flake8
        run: flake8 --ignore Q000 lambda_functions
      - name: Test Coverage
        run: python -m pytest --cov=lambda_functions/v1/functions/lpa_codes/app/api/ --cov-fail-under=90
      - name: Run Unit Tests
        run: python -m pytest
      - name: Install Requirements for Lambda Layers
        run: |
            for i in $(ls -d lambda_functions/*/ | awk -F'/' '{print $2}' | grep '^v[1-9]\+')
            do
              export LAYER_PATH=lambda_functions/"${i}"/lambda_layers/python/lib/python3.7/site-packages
              pip3 install -r lambda_functions/"${i}"/requirements/requirements.txt --target ./$LAYER_PATH/
            done
      - name: Create Artifacts
        run: |
            chmod -R 755 ./lambda_functions
            cd ./lambda_functions
            zip -r /tmp/opg-data-lpa-codes.zip .
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Lambdas
          path: /tmp/opg-data-lpa-codes.zip

  verify_pact:
    name: Verify Pacts
    runs-on: ubuntu-latest
    services:
      dynamodb:
        image: amazon/dynamodb-local
        ports:
          - 8000:8000
        credentials:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8.1
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.1
      - name: Configure AWS Credentials For Terraform
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-session-name: GitHubActionsTerraform
      - name: Get API Version
        run: |
          echo API_VERSION=$(ls -d lambda_functions/v*/ | awk -F'/' '{print $2}' | grep '^v[1-9]\+$' | sort -r | head -n1) >> $GITHUB_ENV
      - name: Get short SHA
        id: shortsha
        run: echo "::set-output name=sha7::$(echo ${GITHUB_SHA} | cut -c1-7)"
      - name: Download pact tools
        if: steps.cache-pact.outputs.cache-hit != 'true'
        run: |
          curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.88.6/pact-1.88.6-linux-x86_64.tar.gz
          tar xzf pact-1.88.6-linux-x86_64.tar.gz
          echo "$PWD/pact/bin" >> $GITHUB_PATH
      - name: Mock API Requirements
        run: |
            cd ./lambda_functions/${API_VERSION}/requirements
            pip3 install -r pact-requirements.txt
      - name: Start Mock API
        run: |
            cd ./lambda_functions/"${API_VERSION}"/functions/lpa_codes/app
            python3 lpa_codes_mock.py &
      - name: Verify Mock API
        run: |
            sleep 3
            if [ `netstat -tulpn | grep 4343 | wc -l` -gt 0 ]
            then
            echo "LPA Codes Rest API Service Started Correctly"
            else
            echo "LPA Codes Rest API Service Not Started"
            fi
      - name: Setup Pact
        run: |
            export PACT_VERSION=$(curl -i -s -X GET https://github.com/pact-foundation/pact-ruby-standalone/releases/latest \
            | grep "location:" | awk -F'tag' '{print $2}' | awk -F'/v' '{print $2}' | sed 's/.$//')
            wget https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v${PACT_VERSION}/pact-${PACT_VERSION}-linux-x86_64.tar.gz
            tar xzf pact-${PACT_VERSION}-linux-x86_64.tar.gz
      - name: Run the create table endpoint
        run: |
            curl --fail -v -X POST http://127.0.0.1:4343/setup/dynamodb/create/table
      - name: Set up the data in tables
        run: |
            curl --fail -v -X POST -d '{"consumer": "sirius", "state": "generated code exists and active"}' \
            -H 'Content-Type: application/json' http://127.0.0.1:4343/setup/state
      - name: Check pacts
        if: github.actor != 'dependabot[bot]'
        env:
          PACT_BROKER_PASSWORD: ${{ secrets.PACT_BROKER_PASSWORD }}
          PACT_VERSION_TAG: ${{ steps.shortsha.outputs.sha7 }}
        run: |
          docker-compose --project-name pact-verifier-lpa-codes run --rm -e PACT_BROKER_PASSWORD -e PACT_VERSION_TAG pact-verifier


  # terraform_checks:
  #   name: Validate ${{ matrix.environment }}
  #   runs-on: "ubuntu-latest"
  #   needs: build_lambda
  #   strategy:
  #     max-parallel: 1
  #     matrix:
  #       include:
  #         - environment: "development"
  #         - environment: "preproduction"
  #         - environment: "production"
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: hashicorp/setup-terraform@v1
  #       with:
  #         terraform_version: 1.0.0
  #     - name: Configure AWS Credentials For Terraform
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-1
  #         role-session-name: GitHubActionsTerraform
  #     - name: Setup Workspace
  #       run: echo TF_WORKSPACE=${{ matrix.environment }} >> $GITHUB_ENV
  #     - name: Download Lambda Artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: Lambdas
  #     - name: Unzip Artifact
  #       run: unzip ./opg-data-lpa-codes.zip -d .
  #     - name: Terraform init
  #       working-directory: ./terraform/environment
  #       run: |
  #         terraform init
  #     - name: Terraform formatting
  #       working-directory: ./terraform/environment
  #       run: |
  #         terraform fmt -diff -check -recursive
  #     - name: Terraform validate
  #       working-directory: ./terraform/environment
  #       run: |
  #         terraform validate
  #     - name: Terraform Plan
  #       working-directory: ./terraform/environment
  #       run: |
  #         terraform plan -input=false

  # ephemeral_environment:
  #   name: Create Ephemeral Environment
  #   runs-on: "ubuntu-latest"
  #   needs: [build_lambda, verify_pact, terraform_checks]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: hashicorp/setup-terraform@v1
  #       with:
  #         terraform_version: 1.0.0
  #     - name: Extract branch name
  #       shell: bash
  #       run: echo "##[set-output name=branch;]$(echo ${GITHUB_HEAD_REF#refs/heads/})"
  #       id: extract_branch
  #     - name: Install workspace manager
  #       run: |
  #         wget https://github.com/TomTucka/terraform-workspace-manager/releases/download/v0.3.0/terraform-workspace-manager_Linux_x86_64.tar.gz -O $HOME/terraform-workspace-manager.tar.gz
  #         sudo tar -xvf $HOME/terraform-workspace-manager.tar.gz -C /usr/local/bin
  #         sudo chmod +x /usr/local/bin/terraform-workspace-manager
  #     - name: Configure AWS Credentials For Terraform
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-1
  #         role-session-name: GitHubActionsTerraform
  #     - name: Download Lambda Artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: Lambdas
  #     - name: Unzip Artifact
  #       run: unzip ./opg-data-lpa-codes.zip -d .
  #     - name: Setup Workspace
  #       run: echo TF_WORKSPACE= ${{ steps.extract_branch.outputs.branch }}
  #     - name: Terraform init
  #       working-directory: ./terraform/environment
  #       run: |
  #         terraform init
  #     - name: Terraform apply
  #       working-directory: ./terraform/environment
  #       run: |
  #         terraform apply --auto-approve
  #     - name: Protect Workspace
  #       run: terraform-workspace-manager -register-workspace=$TF_WORKSPACE -time-to-protect=1 -aws-account-id=288342028542 -aws-iam-role=integrations-ci




