---
version: 2.1

parameters:
  run_pull_request:
    type: boolean
    default: true
  run_commit_to_main:
    type: boolean
    default: true
  run_verify_pact:
    type: boolean
    default: true
  consumerversion:
    type: string
    default: ""
  consumer:
    type: string
    default: ""

workflows:
  pull_request:
    when: << pipeline.parameters.run_pull_request >>
    jobs:
      - build_lambda:
          name: build and artifact
          filters: {branches:{ignore:[main]}}

      - build_lambda_as_image:
          name: build and push
          filters: {branches:{ignore:[main]}}

      - terraform_pre_checks:
          name: terraform preflight checks
          requires: [build and artifact, build and push]
          filters: {branches:{ignore:[main]}}

      - terraform_action:
          name: apply branch environment
          requires: [terraform preflight checks]
          tf_command: apply
          filters: {branches:{ignore:[main]}}

      - workspace_protection:
          name: protect current workspace
          requires: [terraform preflight checks]
          filters: {branches:{ignore:[main]}}

      - integration_tests:
          name: run integration tests
          requires: [protect current workspace, apply branch environment]
          filters: {branches:{ignore:[main]}}

      - workflow_complete:
          name: workflow complete
          requires: [run integration tests]
          filters: {branches:{ignore:[main]}}

  commit_to_main:
    when: << pipeline.parameters.run_commit_to_main >>
    jobs:
      - build_lambda:
          name: build and artifact
          filters: {branches:{only:[main]}}

      - terraform_action:
          name: development apply
          requires: [build and artifact]
          tf_command: apply --auto-approve
          tf_workspace: development
          applycheck: true
          filters: {branches:{only:[main]}}

      - terraform_action:
          name: preprod apply
          requires: [development apply]
          tf_command: apply --auto-approve
          tf_workspace: preproduction
          applycheck: true
          filters: {branches:{only:[main]}}

      - integration_tests:
          name: run integration tests preprod
          workspace: preproduction
          requires: [preprod apply]
          filters: {branches:{only:[main]}}

      - approve:
          name: approve release to production
          type: approval
          requires: [run integration tests preprod]
          filters: {branches:{only:[main]}}

      - terraform_action:
          name: integration apply
          requires: [approve release to production]
          tf_command: apply --auto-approve
          tf_workspace: integration
          applycheck: true
          filters: {branches:{only:[main]}}

      - terraform_action:
          name: integration apply
          requires: [approve release to production]
          tf_command: apply --auto-approve
          tf_workspace: integration
          applycheck: true
          filters: {branches:{only:[main]}}

      - terraform_action:
         name: production apply
         requires: [approve release to production]
         tf_command: apply --auto-approve
         tf_workspace: production
         applycheck: true
         filters: {branches:{only:[main]}}
         pact_tag_production: true

#  verify_pact:
#    when: << pipeline.parameters.run_verify_pact >>
#    jobs:
#      - pact_verification:
#          name: verify the latest pact

  nightly_workspace_deletion:
    triggers:
      - schedule:
          cron: "00 00 * * *"
          filters: {branches:{only:[main]}}
    jobs:
      - destroy_workspaces:
          name: destroy non protected workspaces
          filters: {branches:{only:[main]}}

orbs:
  slack: circleci/slack@3.4.2
  lpa-codes:
    executors:
      python_with_tfvars:
        docker:
          - image: cimg/python:3.8.10
        resource_class: small
        environment:
          TF_CLI_ARGS_plan: -input=false -lock=false
          TF_CLI_ARGS_apply: -input=false -auto-approve
          TF_CLI_ARGS_destroy: -input=false -auto-approve
          TF_CLI_ARGS_init: -input=false -upgrade=true -reconfigure
          TF_VAR_default_role: integrations-ci
          TF_VERSION: 1.2.4
          TF_SHA256SUM: 705ea62a44a0081594dad6b2b093eefefb12d54fa5a20a66562f9e082b00414c
      python:
        docker:
          - image: cimg/python:3.8.10
      go:
        docker:
          - image: cimg/go:1.19.3
    commands:
      terraform_install:
        steps:
          - run:
              name: Download Terraform
              command: curl -sfSO https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
          - run:
              name: Add Terraform SHA256SUM
              command: echo "${TF_SHA256SUM} terraform_${TF_VERSION}_linux_amd64.zip" > SHA256SUMS
          - run:
              name: Check Terraform SHA256SUM
              command: sha256sum -c --status SHA256SUMS
          - run:
              name: Install Terraform
              command: sudo unzip terraform_${TF_VERSION}_linux_amd64.zip -d /bin
# PINNING FOR NOW AS MAJOR VERSION BREAKS CODE
#          - run:
#              name: Get latest terraform version
#              command: |
#                export TERRAFORM_LATEST_VERSION=$(curl -X GET -s https://releases.hashicorp.com/terraform/ \
#                | grep "<a href=\"/terraform/" \
#                | awk -F'/' '{print $3}' | head -1)
#                export TERRAFORM_SHA256SUM=$(curl -X GET -s \
#                https://releases.hashicorp.com/terraform/"${TERRAFORM_LATEST_VERSION}"/terraform_"${TERRAFORM_LATEST_VERSION}"_SHA256SUMS \
#                | grep "_linux_amd64.zip" \
#                | head -1 \
#                | awk '{print $1}')
#                echo "export TF_VERSION=${TERRAFORM_LATEST_VERSION}" >> $BASH_ENV
#                echo "export TF_SHA256SUM=${TERRAFORM_SHA256SUM}" >> $BASH_ENV
      pact_install:
        steps:
          - run:
              name: Set up ready for pact tests
              command: |
                wget https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.82.3/pact-1.82.3-linux-x86_64.tar.gz
                tar xzf pact-1.82.3-linux-x86_64.tar.gz
              working_directory: ~/project
      login_codeartifact:
        steps:
          - run:
              name: install aws cli
              command: |
                pip3 install awscli --upgrade --user
          - run:
              name: login to code artifact for pip
              command: ./login_code_artifact.sh -a 288342028542 -t pip
              working_directory: ~/project/docs/ci_scripts
      cancel_redundant_builds:
        steps:
          - run:
              name: install cancel build requirements
              command: pip3 install -r requirements.txt
              working_directory: ~/project/docs/ci_scripts
          - run:
              name: cancel previous builds
              command: |
                python3 cancel_builds.py \
                --circle_project_username="${CIRCLE_PROJECT_USERNAME}" \
                --circle_project_reponame="${CIRCLE_PROJECT_REPONAME}" \
                --circle_branch="${CIRCLE_BRANCH}" \
                --circle_builds_token="${CIRCLE_BUILDS_TOKEN}" \
                --terms_to_waitfor="apply,plan,terraform,destroy" \
                --prod_job_terms="production ,integration ,pact"
              working_directory: ~/project/docs/ci_scripts
      install_workspace_manager:
        steps:
          - run:
              name: install workspace manager
              command: |
                wget https://github.com/TomTucka/terraform-workspace-manager/releases/download/v0.3.0/terraform-workspace-manager_Linux_x86_64.tar.gz -O $HOME/terraform-workspace-manager.tar.gz
                sudo tar -xvf $HOME/terraform-workspace-manager.tar.gz -C /usr/local/bin
                sudo chmod +x /usr/local/bin/terraform-workspace-manager

jobs:
  build_lambda:
    executor: lpa-codes/python
    resource_class: small
    steps:
      - checkout
      - lpa-codes/login_codeartifact
      - lpa-codes/cancel_redundant_builds
      - run:
          name: install all requirements locally
          command: |
            for i in $(ls -d lambda_functions/*/ | awk -F'/' '{print $2}')
            do
              pip3 install -r ./lambda_functions/"${i}"/requirements/dev-requirements.txt
            done
      - run:
          name: run flake8 - python PEP8 linter, complexity checker
          command: |
            flake8 --ignore Q000 lambda_functions
      - run:
          name: get test coverage (fails below 90%)
          command: |
            python -m pytest --cov=lambda_functions/v1/functions/lpa_codes/app/api/ --cov-fail-under=90
      - run:
          name: run unit tests (with pytest)
          command: |
            python -m pytest
      - run:
          name: install requirements for all lambda layers
          command: |
            for i in $(ls -d lambda_functions/*/ | awk -F'/' '{print $2}' | grep '^v[1-9]\+')
            do
              export LAYER_PATH=lambda_functions/"${i}"/lambda_layers/python/lib/python3.8/site-packages
              pip3 install -r lambda_functions/"${i}"/requirements/requirements.txt --target ./$LAYER_PATH/
            done
      - run:
          name: create artifact for future stages
          command: |
            chmod -R 755 ./lambda_functions
            zip -r9 /tmp/opg-data-lpa-codes.zip .
      - persist_to_workspace:
          root: /tmp
          paths:
            - opg-data-lpa-codes.zip

  build_lambda_as_image:
    executor: lpa-codes/python
    resource_class: small
    environment:
      AWS_REGION: eu-west-1
      AWS_CONFIG_FILE: ~/project/aws_config
      AWS_REGISTRY: 311462405659.dkr.ecr.eu-west-1.amazonaws.com
    steps:
      - checkout
      - setup_remote_docker
      - lpa-codes/login_codeartifact
      - lpa-codes/cancel_redundant_builds
      - run:
          name: build lpa codes image
          command: docker build --file ./Dockerfile --tag lpa-codes:latest .
          working_directory: ~/project/lambda_functions/v1_images
      - run:
          name: build lpa codes dynamodb streams image
          command: docker build --file ./Dockerfile-dynamo --tag lpa-codes-dynamo:latest .
          working_directory: ~/project/lambda_functions/v1_images
      - run:
          name: Set BASH_ENV
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: ECR login
          command: aws ecr get-login-password --region $AWS_REGION --profile integrations-ci | docker login --username AWS --password-stdin $AWS_REGISTRY
      - run:
          name: show version
          command: echo ${TF_VAR_image_tag}
      - run:
          name: push to ECR
          command: |
            docker tag lpa-codes:latest $AWS_REGISTRY/integrations/lpa-codes-lambda:$TF_WORKSPACE-$GIT_COMMIT_PROVIDER
            docker tag lpa-codes-dynamo:latest $AWS_REGISTRY/integrations/lpa-codes-dynamo-lambda:$TF_WORKSPACE-$GIT_COMMIT_PROVIDER
            if [ $CIRCLE_BRANCH == "main" ]; then
              docker tag lpa-codes:latest $AWS_REGISTRY/integrations/lpa-codes-lambda:latest
              docker tag lpa-codes:latest $AWS_REGISTRY/integrations/lpa-codes-lambda:main-$GIT_COMMIT_PROVIDER
              docker tag lpa-codes-dynamo:latest $AWS_REGISTRY/integrations/lpa-codes-dynamo-lambda:latest
              docker tag lpa-codes-dynamo:latest $AWS_REGISTRY/integrations/lpa-codes-dynamo-lambda:main-$GIT_COMMIT_PROVIDER
            fi
              docker push --all-tags $AWS_REGISTRY/integrations/lpa-codes-dynamo-lambda
              docker push --all-tags $AWS_REGISTRY/integrations/lpa-codes-lambda

  terraform_pre_checks:
    executor: lpa-codes/python_with_tfvars
    resource_class: small
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/project
      - lpa-codes/terraform_install
      - run:
          name: unzip artifact
          command: unzip ./opg-data-lpa-codes.zip -d .
      - run:
          name: initialize terraform - environment
          working_directory: ~/project/terraform/environment
          command: terraform init
      - run:
          name: Set BASH_ENV
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: terraform check formatting - environment
          working_directory: ~/project/terraform/environment
          command: terraform fmt -diff -check -recursive
      - run:
          name: validate terraform - environment
          working_directory: ~/project/terraform/environment
          command: terraform validate
      - run:
          name: terraform plan - branch
          working_directory: ~/project/terraform/environment
          command: terraform plan -input=false
      - run:
          name: terraform plan - development
          working_directory: ~/project/terraform/environment
          command: |
            rm -rf .terraform
            export TF_WORKSPACE=development
            terraform init
            terraform plan -input=false
      - run:
          name: terraform plan - integration
          working_directory: ~/project/terraform/environment
          command: |
            rm -rf .terraform
            export TF_WORKSPACE=integration
            terraform init
            terraform plan -input=false
      - run:
          name: terraform plan - preproduction
          working_directory: ~/project/terraform/environment
          command: |
            rm -rf .terraform
            export TF_WORKSPACE=preproduction
            terraform init
            terraform plan -input=false
      - run:
          name: terraform plan - production
          working_directory: ~/project/terraform/environment
          command: |
            rm -rf .terraform
            export TF_WORKSPACE=production
            terraform init
            terraform plan -input=false

  terraform_action:
    executor: lpa-codes/python_with_tfvars
    resource_class: small
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
      tf_command:
        description: terraform command
        default: plan
        type: string
      applycheck:
        description: workaround for rest api provider
        type: boolean
        default: false
      destroy_workspace:
        description: whether to destroy the empty workspace
        type: boolean
        default: false
      pact_tag_production:
        description: to tag the production commit
        type: boolean
        default: false
    environment:
      WORKSPACE: << parameters.tf_workspace >>
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/project
      - lpa-codes/terraform_install
      - run:
          name: unzip artifact
          command: unzip ./opg-data-lpa-codes.zip -d .
      - run:
          name: Set BASH_ENV
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Set Environment variables
          command: |
            eval $(cat $BASH_ENV)
      - run:
          name: modify openapispec
          command:
            sed -i "s/\"\${allowed_roles}\"/\${allowed_roles}/" lpa-codes-openapi-v1.yml
          working_directory: ~/project/lambda_functions/v1/openapi
      - run:
          name: initialize terraform - environment
          working_directory: ~/project/terraform/environment
          command: terraform init
      - run:
          name: terraform << parameters.tf_command >> - environment
          working_directory: ~/project/terraform/environment
          command: terraform << parameters.tf_command >>
      - when:
          condition: << parameters.destroy_workspace >>
          steps:
            - run:
                name: destroy the workspace to clear up
                command: |
                  export WORKSPACE_TO_DELETE="${TF_WORKSPACE}"
                  echo "Switching workspace to default so we can remove branch workspace"
                  export TF_WORKSPACE=default
                  terraform workspace delete "${WORKSPACE_TO_DELETE}" || echo "no workspace to remove"
  pact_verification:
    docker:
      # Primary container image where all the steps run.
      - image: cimg/python:3.8.10
      # Service container image made available to the primary container at `host: localhost`
      - image: amazon/dynamodb-local:latest
        entrypoint: ["java", "-Xmx1G", "-jar", "DynamoDBLocal.jar"]
    working_directory: ~/project
    parameters:
    steps:
      - checkout
      - run:
          name: Set BASH_ENV
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: install requirements mock rest api
          command: |
            cd ~/project/lambda_functions/${API_VERSION}/requirements
            pip3 install -r pact-requirements.txt
      - run:
          name: spin up mock rest api
          command: |
            cd ~/project/lambda_functions/"${API_VERSION}"/functions/lpa_codes/app
            export PYTHONPATH="${PYTHONPATH}:/home/circleci/project"
            python3 lpa_codes_mock.py
          background: true
      - run:
          name: check mock rest api started
          command: |
            sleep 3
            if [ `netstat -tulpn | grep 4343 | wc -l` -gt 0 ]
            then
            echo "LPA Codes Rest API Service Started Correctly"
            else
            echo "LPA Codes Rest API Service Not Started"
            fi
      - run:
          name: Set up ready for pact tests
          command: |
            export PACT_VERSION=$(curl -i -s -X GET https://github.com/pact-foundation/pact-ruby-standalone/releases/latest \
            | grep "location:" | awk -F'tag' '{print $2}' | awk -F'/v' '{print $2}' | sed 's/.$//')
            wget https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v${PACT_VERSION}/pact-${PACT_VERSION}-linux-x86_64.tar.gz
            tar xzf pact-${PACT_VERSION}-linux-x86_64.tar.gz
      - run:
          name: Run the create table endpoint
          command: |
            curl -X POST http://127.0.0.1:4343/setup/dynamodb/create/table
      - run:
          name: Set up the data in tables
          command: |
            curl -X POST -d '{"consumer": "sirius", "state": "generated code exists and active"}' \
            -H 'Content-Type: application/json' http://localhost:4343/setup/state
      - lpa-codes/pact_install
      - run:
          name: verify pact
          command: |
            if [ "${CIRCLE_BRANCH}" = "main" ]; then publish_arg="--publish-verification-results"; else publish_arg=""; fi;
            ./pact/bin/pact-provider-verifier \
            --broker-username ${PACT_BROKER_USER} \
            --broker-password ${PACT_BROKER_PASS} \
            --provider-app-version ${GIT_COMMIT_PROVIDER} \
            --provider-base-url http://localhost:4343/v1 \
            --provider-version-tag ${CIRCLE_BRANCH} \
            --pact-broker-base-url ${PACT_BROKER_BASE_URL} \
            --provider ${PACT_PROVIDER} \
            --custom-provider-header "Authorization: asdf1234567890" \
            --consumer-version-tag master \
            $publish_arg
          working_directory: ~/project
  workspace_protection:
    executor: lpa-codes/python_with_tfvars
    resource_class: small
    working_directory: ~/project/environment
    parameters:
      protect_time:
        description: time to protect workspace
        type: string
        default: "24"
    environment:
      PROTECT_TIME: << parameters.protect_time >>
    steps:
      - checkout:
          path: ~/project
      - lpa-codes/terraform_install
      - lpa-codes/install_workspace_manager
      - run:
          name: Set environment
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: Add workspace to protected list
          command: terraform-workspace-manager -register-workspace="${TF_WORKSPACE}" -time-to-protect="${PROTECT_TIME}" -aws-account-id=288342028542 -aws-iam-role=integrations-ci
  integration_tests:
    executor: lpa-codes/go
    resource_class: small
    parameters:
      workspace:
        description: terraform workspace
        type: string
        default: ""
      role:
        description: role
        type: string
        default: "integrations-ci"
    environment:
      ROLE: << parameters.role >>
      WORKSPACE: << parameters.workspace >>
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Set BASH_ENV
          command: ~/project/.circleci/set_env.sh >> $BASH_ENV
      - run:
          name: run integration scripts
          command: |
            if [ "${TF_WORKSPACE}" == "preproduction" ]
            then
              export BRANCH="pre"
              export ACCOUNT="492687888235"
            else
              export BRANCH="${TF_WORKSPACE}.dev"
              export ACCOUNT="288342028542"
            fi
            go run load_testing.go
          working_directory: ~/project/scripts/ci_pipeline/load_testing
  workflow_complete:
    executor: lpa-codes/python_with_tfvars
    resource_class: small
    working_directory: ~/project
    steps:
      - slack/status:
          channel: opg-integrations
          failure_message: Failure of LPA Codes Workflow for Branch - ${CIRCLE_BRANCH}
          success_message: Success of LPA Codes Workflow for Branch - ${CIRCLE_BRANCH}. Ready to Merge!
  destroy_workspaces:
    executor: lpa-codes/python_with_tfvars
    resource_class: small
    working_directory: ~/project/terraform/environment
    steps:
      - checkout:
          path: ~/project
      - lpa-codes/terraform_install
      - lpa-codes/install_workspace_manager
      - attach_workspace: {at: ~/project}
      - run:
          name: initialise terraform
          command: terraform init
      - run:
          name: destroy unprotected workspaces
          command: |
            unset TF_WORKSPACE
            ./scripts/workspace_cleanup.sh $(terraform-workspace-manager -protected-workspaces=true -aws-account-id=288342028542 -aws-iam-role=integrations-ci)
      - slack/status:
          channel: opg-integrations
          failure_message: nightly destroy of lpa codes workspaces has failed.
          success_message: nightly destroy of lpa codes workspaces has succeeded.
